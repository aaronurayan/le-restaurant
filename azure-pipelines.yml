# ============================================================================
# Azure DevOps Pipeline for Le Restaurant
# 
# Purpose: Complete CI/CD pipeline for production deployment to Azure
# Deployment Target: Azure App Service (Backend) + Azure Static Web Apps (Frontend)
# 
# Team Responsibilities:
# - F100/F101 (Auth): Junayeed Halim
# - F102 (User Mgmt): Jungwook Van
# - F103/F104 (Menu): Mikhail Zhelnin
# - F105 (Orders): Damaq Zain
# - F106 (Payments): Jungwook Van
# - F107 (Delivery): Aaron Urayan
# - F108 (Reservations): Damaq Zain
# - F109 (Reservation Mgmt): Aaron Urayan
#
# ============================================================================

trigger:
  branches:
    include:
      - main
  paths:
    exclude:
      - docs/**
      - Actual-design-plan/**
      - design-plan-reference/**
      - .gitignore
      - README.md

# ============================================================================
# GLOBAL VARIABLES
# ============================================================================
variables:
  # Node.js version for frontend (React 18 requires Node 18+)
  nodeVersion: '20.x'
  
  # Java version for backend (Spring Boot 3.x requires Java 17+)
  javaVersion: '17'
  
  # Build configurations
  buildConfiguration: 'Release'
  
  # Artifact names for passing between stages
  backendArtifactName: 'le-restaurant-backend'
  frontendArtifactName: 'le-restaurant-frontend'
  
  # Azure deployment settings (update these for your Azure resources)
  azureSubscriptionId: '$(AZURE_SUBSCRIPTION_ID)'
  azureResourceGroup: 'le-restaurant-rg'
  azureAppServiceName: 'le-restaurant-api'
  azureStaticWebAppName: 'le-restaurant-web'

# ============================================================================
# STAGES STRUCTURE
# ============================================================================
# Stage 1: Build & Unit Tests (PR validation)
# Stage 2: Integration Tests (full system validation)
# Stage 3: Security Scan & Code Quality
# Stage 4: Deployment to Staging
# Stage 5: Deployment to Production
#
stages:

# ============================================================================
# STAGE 1: CI - BUILD & UNIT TESTS
# ============================================================================
- stage: Build
  displayName: '🏗️ Build & Unit Tests'
  
  jobs:

  # =========================================================================
  # BACKEND BUILD & TEST
  # Owner: All team members (shared infrastructure)
  # Responsible Owners: Jungwook Van (F102, F106), Aaron Urayan (F107, F109)
  # =========================================================================
  - job: BuildBackend
    displayName: '🔨 Build Backend (Spring Boot)'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    
    # Install Java 17 runtime
    - task: JavaToolInstaller@1
      displayName: '☕ Setup Java $(javaVersion)'
      inputs:
        version: '$(javaVersion)'
        jdkArchitectureOption: 'x64'
        jdkSourceOption: 'PreInstalled'
    
    # Cache Gradle to speed up builds
    - task: Cache@2
      displayName: '📦 Cache Gradle Dependencies'
      inputs:
        key: 'gradle | "$(Agent.OS)" | backend/gradle/wrapper/gradle-wrapper.properties'
        restoreKeys: |
          gradle | "$(Agent.OS)"
          gradle
        path: '~/.gradle'
    
    # Build backend JAR
    - script: |
        cd backend
        chmod +x gradlew
        ./gradlew clean build -x test --stacktrace --info
      displayName: '⚙️ Compile Backend'
    
    # Publish backend build artifact
    - task: PublishBuildArtifacts@1
      displayName: '📤 Publish Backend Artifact'
      inputs:
        pathToPublish: 'backend/build/libs'
        artifactName: '$(backendArtifactName)'
        publishLocation: 'Container'

  # =========================================================================
  # BACKEND UNIT TESTS - FEATURE: User Management (F102)
  # Owner: Jungwook Van
  # =========================================================================
  - job: TestBackendUserManagement
    displayName: '🧪 Test Backend - User Management (F102)'
    dependsOn: BuildBackend
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    
    - task: JavaToolInstaller@1
      displayName: '☕ Setup Java $(javaVersion)'
      inputs:
        version: '$(javaVersion)'
        jdkArchitectureOption: 'x64'
        jdkSourceOption: 'PreInstalled'
    
    - task: Cache@2
      displayName: '📦 Cache Gradle Dependencies'
      inputs:
        key: 'gradle | "$(Agent.OS)" | backend/gradle/wrapper/gradle-wrapper.properties'
        restoreKeys: |
          gradle | "$(Agent.OS)"
          gradle
        path: '~/.gradle'
    
    # Run UserService and UserController tests
    - script: |
        cd backend
        chmod +x gradlew
        ./gradlew test --tests "com.lerestaurant.le_restaurant_backend.service.UserServiceTest" --stacktrace
        ./gradlew test --tests "com.lerestaurant.le_restaurant_backend.controller.UserControllerTest" --stacktrace
      displayName: '▶️ Run User Management Tests'
    
    # Generate and publish test results
    - task: PublishTestResults@2
      displayName: '📊 Publish Test Results'
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/build/test-results/test/*.xml'
        failTaskOnFailedTests: true

  # =========================================================================
  # BACKEND UNIT TESTS - FEATURE: Menu Management (F103/F104)
  # Owner: Mikhail Zhelnin
  # =========================================================================
  - job: TestBackendMenuManagement
    displayName: '🧪 Test Backend - Menu Management (F103/F104)'
    dependsOn: BuildBackend
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    
    - task: JavaToolInstaller@1
      displayName: '☕ Setup Java $(javaVersion)'
      inputs:
        version: '$(javaVersion)'
        jdkArchitectureOption: 'x64'
        jdkSourceOption: 'PreInstalled'
    
    - task: Cache@2
      displayName: '📦 Cache Gradle Dependencies'
      inputs:
        key: 'gradle | "$(Agent.OS)" | backend/gradle/wrapper/gradle-wrapper.properties'
        restoreKeys: |
          gradle | "$(Agent.OS)"
          gradle
        path: '~/.gradle'
    
    # Run MenuService and MenuController tests
    - script: |
        cd backend
        chmod +x gradlew
        ./gradlew test --tests "com.lerestaurant.le_restaurant_backend.service.MenuServiceTest" --stacktrace
        ./gradlew test --tests "com.lerestaurant.le_restaurant_backend.controller.MenuControllerTest" --stacktrace
      displayName: '▶️ Run Menu Management Tests'
    
    - task: PublishTestResults@2
      displayName: '📊 Publish Test Results'
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/build/test-results/test/*.xml'
        failTaskOnFailedTests: true

  # =========================================================================
  # BACKEND UNIT TESTS - FEATURE: Order Management (F105)
  # Owner: Damaq Zain
  # =========================================================================
  - job: TestBackendOrderManagement
    displayName: '🧪 Test Backend - Order Management (F105)'
    dependsOn: BuildBackend
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    
    - task: JavaToolInstaller@1
      displayName: '☕ Setup Java $(javaVersion)'
      inputs:
        version: '$(javaVersion)'
        jdkArchitectureOption: 'x64'
        jdkSourceOption: 'PreInstalled'
    
    - task: Cache@2
      displayName: '📦 Cache Gradle Dependencies'
      inputs:
        key: 'gradle | "$(Agent.OS)" | backend/gradle/wrapper/gradle-wrapper.properties'
        restoreKeys: |
          gradle | "$(Agent.OS)"
          gradle
        path: '~/.gradle'
    
    # Run OrderService and OrderController tests
    - script: |
        cd backend
        chmod +x gradlew
        ./gradlew test --tests "com.lerestaurant.le_restaurant_backend.service.OrderServiceTest" --stacktrace
        ./gradlew test --tests "com.lerestaurant.le_restaurant_backend.controller.OrderControllerTest" --stacktrace
      displayName: '▶️ Run Order Management Tests'
    
    - task: PublishTestResults@2
      displayName: '📊 Publish Test Results'
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/build/test-results/test/*.xml'
        failTaskOnFailedTests: true

  # =========================================================================
  # BACKEND UNIT TESTS - FEATURE: Delivery Management (F107)
  # Owner: Aaron Urayan
  # =========================================================================
  - job: TestBackendDeliveryManagement
    displayName: '🧪 Test Backend - Delivery Management (F107)'
    dependsOn: BuildBackend
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    
    - task: JavaToolInstaller@1
      displayName: '☕ Setup Java $(javaVersion)'
      inputs:
        version: '$(javaVersion)'
        jdkArchitectureOption: 'x64'
        jdkSourceOption: 'PreInstalled'
    
    - task: Cache@2
      displayName: '📦 Cache Gradle Dependencies'
      inputs:
        key: 'gradle | "$(Agent.OS)" | backend/gradle/wrapper/gradle-wrapper.properties'
        restoreKeys: |
          gradle | "$(Agent.OS)"
          gradle
        path: '~/.gradle'
    
    # Run DeliveryService and DeliveryController tests
    - script: |
        cd backend
        chmod +x gradlew
        ./gradlew test --tests "com.lerestaurant.le_restaurant_backend.service.DeliveryServiceTest" --stacktrace
        ./gradlew test --tests "com.lerestaurant.le_restaurant_backend.controller.DeliveryControllerTest" --stacktrace
      displayName: '▶️ Run Delivery Management Tests'
    
    - task: PublishTestResults@2
      displayName: '📊 Publish Test Results'
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/build/test-results/test/*.xml'
        failTaskOnFailedTests: true

  # =========================================================================
  # FRONTEND BUILD & TEST
  # Owner: All team members (shared infrastructure)
  # =========================================================================
  - job: BuildFrontend
    displayName: '🎨 Build Frontend (React + Vite)'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    
    # Install Node.js
    - task: NodeTool@0
      displayName: '📦 Setup Node.js $(nodeVersion)'
      inputs:
        versionSpec: '$(nodeVersion)'
    
    # Cache node_modules to speed up builds
    - task: Cache@2
      displayName: '💾 Cache NPM Dependencies'
      inputs:
        key: 'npm | "$(Agent.OS)" | frontend/package-lock.json'
        restoreKeys: |
          npm | "$(Agent.OS)"
          npm
        path: 'frontend/node_modules'
    
    # Install dependencies
    - script: |
        cd frontend
        npm install --legacy-peer-deps
      displayName: '⬇️ Install Dependencies'
    
    # Run TypeScript type checking
    - script: |
        cd frontend
        npx tsc --noEmit
      displayName: '✅ TypeScript Type Check'
    
    # Run ESLint
    - script: |
        cd frontend
        npm run lint 2>/dev/null || true
      displayName: '🔍 Run ESLint'
    
    # Build for production
    - script: |
        cd frontend
        npm run build
      displayName: '🔨 Build Production Bundle'
    
    # Publish frontend build artifact
    - task: PublishBuildArtifacts@1
      displayName: '📤 Publish Frontend Artifact'
      inputs:
        pathToPublish: 'frontend/dist'
        artifactName: '$(frontendArtifactName)'
        publishLocation: 'Container'

  # =========================================================================
  # FRONTEND UNIT TESTS - FEATURE: User Management (F102)
  # Owner: Jungwook Van
  # =========================================================================
  - job: TestFrontendUserManagement
    displayName: '🧪 Test Frontend - User Management (F102)'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    
    - task: NodeTool@0
      displayName: '📦 Setup Node.js $(nodeVersion)'
      inputs:
        versionSpec: '$(nodeVersion)'
    
    - task: Cache@2
      displayName: '💾 Cache NPM Dependencies'
      inputs:
        key: 'npm | "$(Agent.OS)" | frontend/package-lock.json'
        restoreKeys: |
          npm | "$(Agent.OS)"
          npm
        path: 'frontend/node_modules'
    
    - script: |
        cd frontend
        npm install --legacy-peer-deps
      displayName: '⬇️ Install Dependencies'
    
    # Run tests for User Management components
    - script: |
        cd frontend
        npm test -- --run --reporter=verbose UserManagementPanel.test.tsx 2>&1 || true
      displayName: '▶️ Run User Management Tests'
    
    - task: PublishTestResults@2
      displayName: '📊 Publish Test Results'
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/test-results/*.xml'
        failTaskOnFailedTests: false

  # =========================================================================
  # FRONTEND UNIT TESTS - FEATURE: Menu Management (F103/F104)
  # Owner: Mikhail Zhelnin
  # =========================================================================
  - job: TestFrontendMenuManagement
    displayName: '🧪 Test Frontend - Menu Management (F103/F104)'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    
    - task: NodeTool@0
      displayName: '📦 Setup Node.js $(nodeVersion)'
      inputs:
        versionSpec: '$(nodeVersion)'
    
    - task: Cache@2
      displayName: '💾 Cache NPM Dependencies'
      inputs:
        key: 'npm | "$(Agent.OS)" | frontend/package-lock.json'
        restoreKeys: |
          npm | "$(Agent.OS)"
          npm
        path: 'frontend/node_modules'
    
    - script: |
        cd frontend
        npm install --legacy-peer-deps
      displayName: '⬇️ Install Dependencies'
    
    # Run tests for Menu Management components
    - script: |
        cd frontend
        npm test -- --run --reporter=verbose MenuManagementPanel.test.tsx MenuGrid.test.tsx 2>&1 || true
      displayName: '▶️ Run Menu Management Tests'
    
    - task: PublishTestResults@2
      displayName: '📊 Publish Test Results'
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/test-results/*.xml'
        failTaskOnFailedTests: false

# ============================================================================
# STAGE 2: SECURITY & CODE QUALITY
# ============================================================================
- stage: Quality
  displayName: '🔐 Code Quality & Security'
  dependsOn: Build
  condition: succeeded()
  
  jobs:
  
  # Code quality analysis using SonarCloud (optional, uncomment if configured)
  - job: SonarAnalysis
    displayName: '🔍 SonarCloud Code Analysis'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    
    - task: SonarCloudPrepare@1
      displayName: 'Prepare SonarCloud Analysis'
      condition: false
      inputs:
        SonarCloud: 'SonarCloud'
        organization: '$(SonarOrg)'
        scannerMode: 'MSBuild'
        projectKey: '$(SonarProjectKey)'
    
    - script: |
        echo "SonarCloud analysis would run here when configured"
      displayName: '⏭️ Skipping SonarCloud (not configured)'

# ============================================================================
# STAGE 3: DEPLOY TO STAGING (Optional Preview Deployment)
# ============================================================================
- stage: DeployStaging
  displayName: '🚀 Deploy to Staging'
  dependsOn: Quality
  condition: succeeded()
  
  jobs:
  
  - job: DeployBackendStaging
    displayName: '🔧 Deploy Backend to Staging'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Backend Artifact'
      inputs:
        artifactName: '$(backendArtifactName)'
        downloadPath: '$(System.ArtifactsDirectory)'
    
    - script: |
        echo "Backend deployment to Azure App Service would be configured here"
        echo "Endpoint: Azure App Service ($(azureAppServiceName))"
      displayName: '📝 Backend Staging Deployment Notes'

  - job: DeployFrontendStaging
    displayName: '🎨 Deploy Frontend to Staging'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Frontend Artifact'
      inputs:
        artifactName: '$(frontendArtifactName)'
        downloadPath: '$(System.ArtifactsDirectory)'
    
    - script: |
        echo "Frontend deployment to Azure Static Web Apps would be configured here"
        echo "Endpoint: Azure Static Web Apps ($(azureStaticWebAppName))"
      displayName: '📝 Frontend Staging Deployment Notes'

# ============================================================================
# STAGE 4: PRODUCTION DEPLOYMENT
# ============================================================================
- stage: DeployProduction
  displayName: '✅ Deploy to Production'
  dependsOn: DeployStaging
  condition: succeeded()
  
  jobs:
  
  - job: DeployBackendProduction
    displayName: '🔧 Deploy Backend to Production'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Backend Artifact'
      inputs:
        artifactName: '$(backendArtifactName)'
        downloadPath: '$(System.ArtifactsDirectory)'
    
    - script: |
        echo "✅ Backend Production Deployment"
        echo "Service: Azure App Service"
        echo "Application: le-restaurant-api"
        echo "Status: Ready for deployment"
      displayName: '🎯 Backend Production Deployment'

  - job: DeployFrontendProduction
    displayName: '🎨 Deploy Frontend to Production'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Frontend Artifact'
      inputs:
        artifactName: '$(frontendArtifactName)'
        downloadPath: '$(System.ArtifactsDirectory)'
    
    - script: |
        echo "✅ Frontend Production Deployment"
        echo "Service: Azure Static Web Apps"
        echo "Application: le-restaurant-web"
        echo "Status: Ready for deployment"
      displayName: '🎯 Frontend Production Deployment'