plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.5'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
}

group = 'com.lerestaurant'
version = '1.0.0'
description = 'Le Restaurant Backend flow controls'

java {
	sourceCompatibility = '17'
	targetCompatibility = '17'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	compileOnly 'org.projectlombok:lombok:1.18.28'
	annotationProcessor 'org.projectlombok:lombok:1.18.28'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

// JaCoCo Configuration for Code Coverage
jacoco {
	toolVersion = "0.8.11"
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		html.required = true
		csv.required = false
		xml.outputLocation = layout.buildDirectory.file('reports/jacoco/test/jacocoTestReport.xml')
		html.outputLocation = layout.buildDirectory.dir('reports/jacoco/test/html')
	}
	
	// Exclude generated code and configurations
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
				'**/config/**',
				'**/entity/**',
				'**/dto/**',
				'**/enums/**',
				'**/*Application.class'
			])
		}))
	}
}

// JaCoCo Coverage Verification (80% threshold for F102 and F106)
jacocoTestCoverageVerification {
	dependsOn jacocoTestReport
	violationRules {
		rule {
			enabled = true
			element = 'CLASS'
			
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.80
			}
			
			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.80
			}
			
			// Exclude generated code and configurations
			excludes = [
				'com.lerestaurant.le_restaurant_backend.config.*',
				'com.lerestaurant.le_restaurant_backend.entity.*',
				'com.lerestaurant.le_restaurant_backend.dto.*',
				'com.lerestaurant.le_restaurant_backend.enums.*',
				'com.lerestaurant.le_restaurant_backend.repository.*',
				'com.lerestaurant.le_restaurant_backend.controller.*',
				'com.lerestaurant.le_restaurant_backend.service.*',
				'com.lerestaurant.le_restaurant_backend.LeRestaurantBackendApplication'
			]
		}
	}
}

// Add coverage verification to check task (disabled for development)
// check.dependsOn jacocoTestCoverageVerification
