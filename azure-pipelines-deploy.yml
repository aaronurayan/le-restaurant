# ==============================================================================
# Azure DevOps CI/CD Pipeline - Le Restaurant
# ==============================================================================
#
# Complete CI/CD pipeline for Le Restaurant application:
# - Frontend: React 18 + TypeScript + Vite ‚Üí Azure Static Web Apps
# - Backend: Spring Boot 3.x + Java 17 ‚Üí Azure App Service
#
# Pipeline Stages:
# 1. Code Quality & Linting
# 2. Build & Test with Coverage
# 3. Security Scanning
# 4. Deploy to Azure (Production)
#
# Author: Le Restaurant Development Team
# Version: 2.0.0
# Last Updated: October 22, 2025
# ==============================================================================

# Trigger Configuration
trigger:
  batch: true
  branches:
    include:
      - main
      - develop
      - F*
  paths:
    exclude:
      - README.md
      - docs
      - .gitignore
      - '*.md'
      - Actual-design-plan

# Pull Request Validation
pr:
  branches:
    include:
      - main
      - develop
  autoCancel: true
  paths:
    exclude:
      - README.md
      - docs
      - '*.md'

# Pipeline Resources
pool:
  vmImage: ubuntu-latest

# ==============================================================================
# GLOBAL VARIABLES
# ==============================================================================
variables:
  # Version Configuration
  NODE_VERSION: 20.x
  JAVA_VERSION: '17'

  # Path Configuration
  FRONTEND_PATH: frontend
  BACKEND_PATH: backend

  # Coverage Thresholds
  FRONTEND_COVERAGE_THRESHOLD: 80
  BACKEND_COVERAGE_THRESHOLD: 80

  # Azure Resource Names (Update these with your Azure resources)
  AZURE_SUBSCRIPTION: le-restaurant-azure-connection
  BACKEND_APP_NAME: le-restaurant-backend-prod
  FRONTEND_APP_NAME: le-restaurant-frontend
  RESOURCE_GROUP: le-restaurant-rg

  # Build Configuration
  BACKEND_JAR_NAME: le-restaurant-backend-0.0.1-SNAPSHOT.jar
  FRONTEND_BUILD_OUTPUT: dist

  # Test Configuration
  JUNIT_TEST_RESULTS_DIR: $(BACKEND_PATH)/build/test-results/test
  JACOCO_REPORT_DIR: $(BACKEND_PATH)/build/reports/jacoco/test

# ==============================================================================
# STAGE 1: CODE QUALITY & LINTING
# ==============================================================================
stages:
  - stage: CodeQuality
    displayName: üîç Code Quality & Linting
    jobs:
      # Frontend Linting
      - job: FrontendLint
        displayName: Frontend ESLint Analysis
        steps:
          - checkout: self
            fetchDepth: 1

          - task: NodeTool@0
            displayName: Install Node.js $(NODE_VERSION)
            inputs:
              versionSpec: $(NODE_VERSION)

          - task: Cache@2
            displayName: Cache npm dependencies
            inputs:
              key: npm | "$(Agent.OS)" | $(FRONTEND_PATH)/package-lock.json
              restoreKeys: |
                npm | "$(Agent.OS)"
              path: $(FRONTEND_PATH)/node_modules

          - script: |
              cd $(FRONTEND_PATH)
              npm ci
            displayName: üì¶ Install Dependencies

          - script: |
              cd $(FRONTEND_PATH)
              npm run lint
            displayName: üîé Run ESLint
            continueOnError: true

      # Backend Code Analysis
      - job: BackendLint
        displayName: Backend Code Analysis
        steps:
          - checkout: self
            fetchDepth: 1

          - task: JavaToolInstaller@0
            displayName: Install Java $(JAVA_VERSION)
            inputs:
              versionSpec: $(JAVA_VERSION)
              jdkArchitectureOption: x64
              jdkSourceOption: PreInstalled

          - task: Cache@2
            displayName: Cache Gradle Dependencies
            inputs:
              key: gradle | "$(Agent.OS)" |
                $(BACKEND_PATH)/gradle/wrapper/gradle-wrapper.properties
              restoreKeys: |
                gradle | "$(Agent.OS)"
              path: ~/.gradle/caches

          - script: |
              cd $(BACKEND_PATH)
              chmod +x gradlew
              ./gradlew check -x test
            displayName: üîé Run Checkstyle
            continueOnError: true

  # ==============================================================================
  # STAGE 2: BUILD & TEST
  # ==============================================================================
  - stage: BuildAndTest
    displayName: üî® Build & Test
    dependsOn: CodeQuality
    condition: succeeded()
    jobs:
      # Frontend Build & Test
      - job: FrontendBuildTest
        displayName: Frontend Build & Test with Coverage
        steps:
          - checkout: self
            fetchDepth: 1

          - task: NodeTool@0
            displayName: Install Node.js $(NODE_VERSION)
            inputs:
              versionSpec: $(NODE_VERSION)

          - task: Cache@2
            displayName: Cache npm dependencies
            inputs:
              key: npm | "$(Agent.OS)" | $(FRONTEND_PATH)/package-lock.json
              restoreKeys: |
                npm | "$(Agent.OS)"
              path: $(FRONTEND_PATH)/node_modules

          - script: |
              cd $(FRONTEND_PATH)
              npm ci
            displayName: üì¶ Install Dependencies

          - script: |
              cd $(FRONTEND_PATH)
              npm run test:coverage
            displayName: üß™ Run Tests with Coverage
            continueOnError: false

          - task: PublishTestResults@2
            displayName: üìä Publish Frontend Test Results
            condition: always()
            inputs:
              testResultsFormat: JUnit
              testResultsFiles: $(FRONTEND_PATH)/test-results/junit.xml
              failTaskOnFailedTests: true
              testRunTitle: Frontend Unit Tests

          - task: PublishCodeCoverageResults@2
            displayName: üìä Publish Frontend Coverage
            condition: always()
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: $(FRONTEND_PATH)/coverage/cobertura-coverage.xml
              pathToSources: $(FRONTEND_PATH)/src
              failIfCoverageEmpty: true

          - script: |
              cd $(FRONTEND_PATH)
              echo "üìä Analyzing Frontend Test Coverage..."
              if [ -f coverage/coverage-summary.json ]; then
                LINES=$(node -pe "JSON.parse(require('fs').readFileSync('coverage/coverage-summary.json', 'utf8')).total.lines.pct")
                BRANCHES=$(node -pe "JSON.parse(require('fs').readFileSync('coverage/coverage-summary.json', 'utf8')).total.branches.pct")
                FUNCTIONS=$(node -pe "JSON.parse(require('fs').readFileSync('coverage/coverage-summary.json', 'utf8')).total.functions.pct")
                STATEMENTS=$(node -pe "JSON.parse(require('fs').readFileSync('coverage/coverage-summary.json', 'utf8')).total.statements.pct")

                echo "Lines: $LINES% | Branches: $BRANCHES% | Functions: $FUNCTIONS% | Statements: $STATEMENTS%"

                if (( $(echo "$LINES < $(FRONTEND_COVERAGE_THRESHOLD)" | bc -l) )); then
                  echo "##vso[task.logissue type=error]Line coverage $LINES% is below threshold $(FRONTEND_COVERAGE_THRESHOLD)%"
                  exit 1
                fi
                echo "‚úÖ Coverage threshold met: $LINES%"
              else
                echo "##vso[task.logissue type=warning]Coverage summary file not found"
              fi
            displayName: ‚úÖ Verify Coverage Threshold
            condition: always()

          - script: |
              cd $(FRONTEND_PATH)
              npm run build
            displayName: üèóÔ∏è Build Frontend

          - task: PublishPipelineArtifact@1
            displayName: üì¶ Publish Frontend Artifact
            inputs:
              targetPath: $(FRONTEND_PATH)/$(FRONTEND_BUILD_OUTPUT)
              artifact: frontend-build
              publishLocation: pipeline

      # Backend Build & Test
      - job: BackendBuildTest
        displayName: Backend Build & Test with Coverage
        steps:
          - checkout: self
            fetchDepth: 1

          - task: JavaToolInstaller@0
            displayName: Install Java $(JAVA_VERSION)
            inputs:
              versionSpec: $(JAVA_VERSION)
              jdkArchitectureOption: x64
              jdkSourceOption: PreInstalled

          - task: Cache@2
            displayName: Cache Gradle Dependencies
            inputs:
              key: gradle | "$(Agent.OS)" |
                $(BACKEND_PATH)/gradle/wrapper/gradle-wrapper.properties
              restoreKeys: |
                gradle | "$(Agent.OS)"
              path: ~/.gradle/caches

          - script: |
              cd $(BACKEND_PATH)
              chmod +x gradlew
              echo "üß™ Running Backend Tests with Coverage..."
              ./gradlew clean test jacocoTestReport --stacktrace --info
            displayName: üß™ Run Tests with Coverage
            continueOnError: false

          - task: PublishTestResults@2
            displayName: üìä Publish Test Results
            condition: always()
            inputs:
              testResultsFormat: JUnit
              testResultsFiles: $(JUNIT_TEST_RESULTS_DIR)/*.xml
              failTaskOnFailedTests: true
              testRunTitle: Backend Unit Tests
              mergeTestResults: true

          - task: PublishCodeCoverageResults@2
            displayName: üìä Publish Backend Coverage
            condition: always()
            inputs:
              codeCoverageTool: JaCoCo
              summaryFileLocation: $(JACOCO_REPORT_DIR)/jacocoTestReport.xml
              reportDirectory: $(JACOCO_REPORT_DIR)/html
              pathToSources: $(BACKEND_PATH)/src/main/java
              failIfCoverageEmpty: true

          - script: |
              cd $(BACKEND_PATH)
              echo "üìä Verifying Backend Coverage Threshold..."
              ./gradlew jacocoTestCoverageVerification --stacktrace

              if [ $? -eq 0 ]; then
                echo "‚úÖ Backend coverage threshold ($(BACKEND_COVERAGE_THRESHOLD)%) met"
              else
                echo "##vso[task.logissue type=error]Backend coverage below threshold $(BACKEND_COVERAGE_THRESHOLD)%"
                exit 1
              fi
            displayName: ‚úÖ Verify Coverage Threshold
            condition: always()

          - script: |
              cd $(BACKEND_PATH)
              ./gradlew bootJar
            displayName: üèóÔ∏è Build Backend JAR

          - task: CopyFiles@2
            displayName: üìã Copy Backend Artifact
            inputs:
              sourceFolder: $(BACKEND_PATH)/build/libs
              contents: '*.jar'
              targetFolder: $(Build.ArtifactStagingDirectory)/backend

          - task: PublishPipelineArtifact@1
            displayName: üì¶ Publish Backend Artifact
            inputs:
              targetPath: $(Build.ArtifactStagingDirectory)/backend
              artifact: backend-build
              publishLocation: pipeline

  # ==============================================================================
  # STAGE 3: SECURITY SCANNING
  # ==============================================================================
  - stage: SecurityScan
    displayName: üîí Security Scanning
    dependsOn: BuildAndTest
    condition: succeeded()
    jobs:
      - job: DependencyScan
        displayName: Dependency Vulnerability Scan
        steps:
          - checkout: self
            fetchDepth: 1

          # Frontend Security Scan
          - task: NodeTool@0
            displayName: Install Node.js $(NODE_VERSION)
            inputs:
              versionSpec: $(NODE_VERSION)

          - script: |
              cd $(FRONTEND_PATH)
              npm ci
              npm audit --production --audit-level=high
            displayName: üîç Frontend Security Audit
            continueOnError: true

          # Backend Security Scan
          - task: JavaToolInstaller@0
            displayName: Install Java $(JAVA_VERSION)
            inputs:
              versionSpec: $(JAVA_VERSION)
              jdkArchitectureOption: x64
              jdkSourceOption: PreInstalled

          - script: |
              cd $(BACKEND_PATH)
              chmod +x gradlew
              ./gradlew dependencyCheckAnalyze || true
            displayName: üîç Backend Dependency Check
            continueOnError: true

  # ==============================================================================
  # STAGE 4: DEPLOY TO AZURE
  # ==============================================================================
  - stage: DeployProduction
    displayName: üöÄ Deploy to Azure Production
    dependsOn:
      - BuildAndTest
      - SecurityScan
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
      # Deploy Backend to Azure App Service
      - deployment: DeployBackend
        displayName: Deploy Backend to Azure App Service
        environment: production-backend
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: none

                - task: DownloadPipelineArtifact@2
                  displayName: ‚¨áÔ∏è Download Backend Artifact
                  inputs:
                    buildType: current
                    artifactName: backend-build
                    targetPath: $(Pipeline.Workspace)/backend

                - task: AzureWebApp@1
                  displayName: üöÄ Deploy to Azure App Service
                  inputs:
                    azureSubscription: $(AZURE_SUBSCRIPTION)
                    appType: webAppLinux
                    appName: $(BACKEND_APP_NAME)
                    package: $(Pipeline.Workspace)/backend/$(BACKEND_JAR_NAME)
                    runtimeStack: JAVA|17-java17
                    startUpCommand: java -Dserver.port=8080 -Dspring.profiles.active=prod -jar
                      /home/site/wwwroot/$(BACKEND_JAR_NAME)
                    deploymentMethod: auto

                - task: AzureAppServiceSettings@1
                  displayName: ‚öôÔ∏è Configure App Settings
                  inputs:
                    azureSubscription: $(AZURE_SUBSCRIPTION)
                    appName: $(BACKEND_APP_NAME)
                    resourceGroupName: $(RESOURCE_GROUP)
                    appSettings: |
                      [
                        {
                          "name": "SPRING_PROFILES_ACTIVE",
                          "value": "prod",
                          "slotSetting": false
                        },
                        {
                          "name": "SERVER_PORT",
                          "value": "8080",
                          "slotSetting": false
                        },
                        {
                          "name": "JAVA_OPTS",
                          "value": "-Xms512m -Xmx1024m",
                          "slotSetting": false
                        },
                        {
                          "name": "WEBSITES_PORT",
                          "value": "8080",
                          "slotSetting": false
                        }
                      ]

                - script: |
                    echo "‚è≥ Waiting for backend to start..."
                    sleep 30

                    BACKEND_URL="https://$(BACKEND_APP_NAME).azurewebsites.net/actuator/health"
                    echo "Checking: $BACKEND_URL"

                    for i in {1..10}; do
                      RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" $BACKEND_URL || echo "000")
                      if [ "$RESPONSE" = "200" ]; then
                        echo "‚úÖ Backend deployed successfully and is healthy"
                        exit 0
                      fi
                      echo "Attempt $i/10: Got response $RESPONSE, retrying..."
                      sleep 10
                    done

                    echo "‚ö†Ô∏è Backend health check inconclusive"
                  displayName: üè• Post-Deploy Health Check
                  continueOnError: true

      # Deploy Frontend to Azure Static Web Apps
      - deployment: DeployFrontend
        displayName: Deploy Frontend to Azure Static Web Apps
        environment: production-frontend
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: none

                - task: DownloadPipelineArtifact@2
                  displayName: ‚¨áÔ∏è Download Frontend Artifact
                  inputs:
                    buildType: current
                    artifactName: frontend-build
                    targetPath: $(Pipeline.Workspace)/frontend

                - task: AzureStaticWebApp@0
                  displayName: üöÄ Deploy to Azure Static Web Apps
                  inputs:
                    app_location: $(Pipeline.Workspace)/frontend
                    skip_app_build: true
                    azure_static_web_apps_api_token: $(AZURE_STATIC_WEB_APPS_API_TOKEN)

  # ==============================================================================
  # STAGE 5: POST-DEPLOYMENT VALIDATION
  # ==============================================================================
  - stage: PostDeploymentValidation
    displayName: ‚úÖ Post-Deployment Validation
    dependsOn: DeployProduction
    condition: succeeded()
    jobs:
      - job: HealthCheck
        displayName: Health Check & Smoke Tests
        steps:
          - script: |
              echo "üè• Running Health Checks..."

              # Backend Health Check
              BACKEND_URL="https://$(BACKEND_APP_NAME).azurewebsites.net/actuator/health"
              echo "Checking Backend: $BACKEND_URL"

              RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" $BACKEND_URL)
              if [ $RESPONSE -eq 200 ]; then
                echo "‚úÖ Backend is healthy"
              else
                echo "‚ùå Backend health check failed with status: $RESPONSE"
                exit 1
              fi

              # Frontend Health Check
              FRONTEND_URL="https://$(FRONTEND_APP_NAME).azurestaticapps.net"
              echo "Checking Frontend: $FRONTEND_URL"

              RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" $FRONTEND_URL)
              if [ $RESPONSE -eq 200 ]; then
                echo "‚úÖ Frontend is accessible"
              else
                echo "‚ùå Frontend health check failed with status: $RESPONSE"
                exit 1
              fi

              echo "‚úÖ All health checks passed!"
            displayName: üè• Health Check
            continueOnError: false

          - script: |
              echo "üìä Deployment Summary:"
              echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
              echo "üîπ Backend URL: https://$(BACKEND_APP_NAME).azurewebsites.net"
              echo "üîπ Frontend URL: https://$(FRONTEND_APP_NAME).azurestaticapps.net"
              echo "üîπ Build Number: $(Build.BuildNumber)"
              echo "üîπ Deployed Branch: $(Build.SourceBranchName)"
              echo "üîπ Commit: $(Build.SourceVersion)"
              echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            displayName: üìä Deployment Summary