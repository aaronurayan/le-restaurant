# ==============================================================================
# Azure DevOps CI/CD Pipeline - Le Restaurant
# ==============================================================================
#
# Complete CI/CD pipeline for Le Restaurant application:
# - Frontend: React 18 + TypeScript + Vite ‚Üí Azure Static Web Apps
# - Backend: Spring Boot 3.x + Java 17 ‚Üí Azure App Service
#
# Pipeline Stages:
# 1. Code Quality & Linting
# 2. Build & Test with Coverage (Unit Tests + E2E Integration Tests)
# 3. Security Scanning
# 4. Deploy to Azure (Production)
#
# Testing Strategy:
# - Backend Unit Tests: 80% coverage threshold (JaCoCo)
# - E2E Integration Tests: 10 Scenario-based tests covering F100-F109
#   * BaseE2ETest: Abstract base class with shared helper methods
#   * Scenario1-10: Independent test scenarios with Separation of Concerns
#
# Author: Le Restaurant Development Team
# Version: 2.1.0
# Last Updated: October 23, 2025
# ==============================================================================

# Trigger Configuration
trigger:
  batch: true
  branches:
    include:
      - main
      - develop
  paths:
    exclude:
      - README.md
      - docs
      - .gitignore
      - '**/*.md'

# Pull Request Validation
pr:
  branches:
    include:
      - main
      - develop
  autoCancel: true

# Pipeline Resources
pool:
  vmImage: ubuntu-latest

# ==============================================================================
# GLOBAL VARIABLES
# ==============================================================================
variables:
  # Version Configuration
  NODE_VERSION: 20.x
  JAVA_VERSION: '17'

  # Path Configuration
  FRONTEND_PATH: frontend
  BACKEND_PATH: backend

  # Coverage Thresholds
  FRONTEND_COVERAGE_THRESHOLD: '80'
  BACKEND_COVERAGE_THRESHOLD: '80'

  # Azure Resource Names (Updated with actual resources)
  AZURE_SUBSCRIPTION: le-restaurant-azure-connection
  BACKEND_APP_NAME: le-restaurant
  FRONTEND_APP_NAME: le-restaurant-frontend
  RESOURCE_GROUP: le-restaurant-rg

  # Build Configuration
  BACKEND_JAR_NAME: le-restaurant-backend-0.0.1-SNAPSHOT.jar
  FRONTEND_BUILD_OUTPUT: dist

# ==============================================================================
# STAGE 1: CODE QUALITY & LINTING
# ==============================================================================
stages:
  - stage: CodeQuality
    displayName: üîç Code Quality & Linting
    jobs:
      # Frontend Linting
      - job: FrontendLint
        displayName: Frontend ESLint Analysis
        steps:
          - checkout: self
            fetchDepth: 1

          - task: NodeTool@0
            displayName: Install Node.js $(NODE_VERSION)
            inputs:
              versionSpec: $(NODE_VERSION)

          - task: Cache@2
            displayName: Cache npm dependencies
            inputs:
              key: npm | "$(Agent.OS)" | $(FRONTEND_PATH)/package-lock.json
              restoreKeys: |
                npm | "$(Agent.OS)"
              path: $(FRONTEND_PATH)/node_modules

          - script: |
              cd $(FRONTEND_PATH)
              npm ci
            displayName: üì¶ Install Dependencies

          - script: |
              cd $(FRONTEND_PATH)
              npm run lint
            displayName: üîé Run ESLint
            continueOnError: true

      # Backend Code Analysis
      - job: BackendLint
        displayName: Backend Code Analysis
        steps:
          - checkout: self
            fetchDepth: 1

          - task: JavaToolInstaller@0
            displayName: Install Java $(JAVA_VERSION)
            inputs:
              versionSpec: $(JAVA_VERSION)
              jdkArchitectureOption: x64
              jdkSourceOption: PreInstalled

          - task: Cache@2
            displayName: Cache Gradle Dependencies
            inputs:
              key: gradle | "$(Agent.OS)" |
                $(BACKEND_PATH)/gradle/wrapper/gradle-wrapper.properties
              restoreKeys: |
                gradle | "$(Agent.OS)"
              path: ~/.gradle/caches

          - script: |
              cd $(BACKEND_PATH)
              chmod +x gradlew
              ./gradlew check -x test
            displayName: üîé Run Checkstyle
            continueOnError: true

  # ==============================================================================
  # STAGE 2: BUILD & TEST
  # ==============================================================================
  - stage: BuildAndTest
    displayName: üî® Build & Test
    dependsOn: CodeQuality
    condition: succeeded()
    jobs:
      # Frontend Build & Test
      - job: FrontendBuildTest
        displayName: Frontend Build & Test with Coverage
        steps:
          - checkout: self
            fetchDepth: 1

          - task: NodeTool@0
            displayName: Install Node.js $(NODE_VERSION)
            inputs:
              versionSpec: $(NODE_VERSION)

          - task: Cache@2
            displayName: Cache npm dependencies
            inputs:
              key: npm | "$(Agent.OS)" | $(FRONTEND_PATH)/package-lock.json
              restoreKeys: |
                npm | "$(Agent.OS)"
              path: $(FRONTEND_PATH)/node_modules

          - script: |
              cd $(FRONTEND_PATH)
              npm ci
            displayName: üì¶ Install Dependencies

          - script: |
              cd $(FRONTEND_PATH)
              npm run test:coverage
            displayName: üß™ Run Tests with Coverage
            continueOnError: false

          - task: PublishCodeCoverageResults@2
            displayName: üìä Publish Frontend Coverage
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: $(FRONTEND_PATH)/coverage/cobertura-coverage.xml
              pathToSources: $(FRONTEND_PATH)/src
              failIfCoverageEmpty: true

          - script: |
              cd $(FRONTEND_PATH)
              COVERAGE=$(grep -oP '(?<=lines>)[0-9.]+' coverage/cobertura-coverage.xml | head -1)
              echo "Coverage: $COVERAGE%"
              if (( $(echo "$COVERAGE < $(FRONTEND_COVERAGE_THRESHOLD)" | bc -l) )); then
                echo "##vso[task.logissue type=error]Coverage $COVERAGE% is below threshold $(FRONTEND_COVERAGE_THRESHOLD)%"
                exit 1
              fi
            displayName: ‚úÖ Verify Coverage Threshold
            condition: always()

          - script: |
              cd $(FRONTEND_PATH)
              npm run build
            displayName: üèóÔ∏è Build Frontend

          - task: PublishPipelineArtifact@1
            displayName: üì¶ Publish Frontend Artifact
            inputs:
              targetPath: $(FRONTEND_PATH)/$(FRONTEND_BUILD_OUTPUT)
              artifact: frontend-build
              publishLocation: pipeline

      # Backend Build & Test
      - job: BackendBuildTest
        displayName: Backend Build & Test with Coverage
        steps:
          - checkout: self
            fetchDepth: 1

          - task: JavaToolInstaller@0
            displayName: Install Java $(JAVA_VERSION)
            inputs:
              versionSpec: $(JAVA_VERSION)
              jdkArchitectureOption: x64
              jdkSourceOption: PreInstalled

          - task: Cache@2
            displayName: Cache Gradle Dependencies
            inputs:
              key: gradle | "$(Agent.OS)" |
                $(BACKEND_PATH)/gradle/wrapper/gradle-wrapper.properties
              restoreKeys: |
                gradle | "$(Agent.OS)"
              path: ~/.gradle/caches

          - script: |
              cd $(BACKEND_PATH)
              chmod +x gradlew
              ./gradlew clean test jacocoTestReport --stacktrace
            displayName: üß™ Run Tests with Coverage

          - task: PublishTestResults@2
            displayName: üìä Publish Test Results
            inputs:
              testResultsFormat: JUnit
              testResultsFiles: $(BACKEND_PATH)/build/test-results/test/*.xml
              failTaskOnFailedTests: true
              testRunTitle: Backend Unit Tests

          - task: PublishCodeCoverageResults@2
            displayName: üìä Publish Backend Coverage
            inputs:
              codeCoverageTool: JaCoCo
              summaryFileLocation: $(BACKEND_PATH)/build/reports/jacoco/test/jacocoTestReport.xml
              pathToSources: $(BACKEND_PATH)/src/main/java
              failIfCoverageEmpty: true

          - script: |
              cd $(BACKEND_PATH)
              ./gradlew jacocoTestCoverageVerification
            displayName: ‚úÖ Verify Coverage Threshold
            condition: always()

          - script: |
              cd $(BACKEND_PATH)
              ./gradlew bootJar
            displayName: üèóÔ∏è Build Backend JAR

          - task: CopyFiles@2
            displayName: üìã Copy Backend Artifact
            inputs:
              sourceFolder: $(BACKEND_PATH)/build/libs
              contents: '*.jar'
              targetFolder: $(Build.ArtifactStagingDirectory)/backend

          - task: PublishPipelineArtifact@1
            displayName: üì¶ Publish Backend Artifact
            inputs:
              targetPath: $(Build.ArtifactStagingDirectory)/backend
              artifact: backend-build
              publishLocation: pipeline

      # E2E Integration Tests (Scenario Tests)
      - job: E2EIntegrationTests
        displayName: E2E Integration Tests (Scenario Tests)
        dependsOn: []
        steps:
          - checkout: self
            fetchDepth: 1

          - task: JavaToolInstaller@0
            displayName: Install Java $(JAVA_VERSION)
            inputs:
              versionSpec: $(JAVA_VERSION)
              jdkArchitectureOption: x64
              jdkSourceOption: PreInstalled

          - task: Cache@2
            displayName: Cache Gradle Dependencies
            inputs:
              key: gradle | "$(Agent.OS)" |
                $(BACKEND_PATH)/gradle/wrapper/gradle-wrapper.properties
              restoreKeys: |
                gradle | "$(Agent.OS)"
              path: ~/.gradle/caches

          - script: |
              cd $(BACKEND_PATH)
              chmod +x gradlew
              ./gradlew test --tests "*Scenario*" --stacktrace
            displayName: üß™ Run E2E Scenario Tests
            continueOnError: false

          - task: PublishTestResults@2
            displayName: üìä Publish E2E Test Results
            inputs:
              testResultsFormat: JUnit
              testResultsFiles: $(BACKEND_PATH)/build/test-results/test/*.xml
              failTaskOnFailedTests: true
              testRunTitle: E2E Integration Tests (Scenario 1-10)
            condition: always()

          - script: |
              echo "üìã E2E Test Coverage Summary:"
              echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
              echo "‚úÖ Scenario 1: New Customer Full Journey (F100-F109)"
              echo "‚úÖ Scenario 2: Manager User Account Management (F100-F102)"
              echo "‚úÖ Scenario 3: Menu Lifecycle & Order Impact (F103-F105)"
              echo "‚úÖ Scenario 4: Payment Failure & Retry (F105-F106)"
              echo "‚úÖ Scenario 5: Reservation Conflicts & Rejections (F108-F109)"
              echo "‚úÖ Scenario 6: Order Cancellation by Manager (F105-F106)"
              echo "‚úÖ Scenario 7: Unauthorized Access Attempts (F101-F102,F104,F109)"
              echo "‚úÖ Scenario 8: Delivery Driver Workflow (F105-F107)"
              echo "‚úÖ Scenario 9: High-Volume Concurrent Orders (F105)"
              echo "‚úÖ Scenario 10: Full Refund Process (F105-F107)"
              echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
              echo "üìä All E2E tests completed successfully!"
            displayName: üìã E2E Test Summary
            condition: always()

  # ==============================================================================
  # STAGE 3: SECURITY SCANNING
  # ==============================================================================
  - stage: SecurityScan
    displayName: üîí Security Scanning
    dependsOn: BuildAndTest
    condition: succeeded()
    jobs:
      - job: DependencyScan
        displayName: Dependency Vulnerability Scan
        steps:
          - checkout: self
            fetchDepth: 1

          # Frontend Security Scan
          - task: NodeTool@0
            displayName: Install Node.js $(NODE_VERSION)
            inputs:
              versionSpec: $(NODE_VERSION)

          - script: |
              cd $(FRONTEND_PATH)
              npm ci
              npm audit --production --audit-level=high
            displayName: üîç Frontend Security Audit
            continueOnError: true

          # Backend Security Scan
          - task: JavaToolInstaller@0
            displayName: Install Java $(JAVA_VERSION)
            inputs:
              versionSpec: $(JAVA_VERSION)
              jdkArchitectureOption: x64
              jdkSourceOption: PreInstalled

          - script: |
              cd $(BACKEND_PATH)
              chmod +x gradlew
              ./gradlew dependencyCheckAnalyze || true
            displayName: üîç Backend Dependency Check
            continueOnError: true

  # ==============================================================================
  # STAGE 4: DEPLOY TO AZURE
  # ==============================================================================
  - stage: DeployProduction
    displayName: üöÄ Deploy to Azure Production
    dependsOn:
      - BuildAndTest
      - SecurityScan
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
      # Deploy Backend to Azure App Service
      - job: DeployBackend
        displayName: Deploy Backend to Azure App Service
        steps:
          - checkout: none

          - task: DownloadPipelineArtifact@2
            displayName: ‚¨áÔ∏è Download Backend Artifact
            inputs:
              buildType: current
              artifactName: backend-build
              targetPath: $(Pipeline.Workspace)/backend

          - task: AzureWebApp@1
            displayName: üöÄ Deploy to Azure App Service
            inputs:
              azureSubscription: $(AZURE_SUBSCRIPTION)
              appType: webAppLinux
              appName: $(BACKEND_APP_NAME)
              package: $(Pipeline.Workspace)/backend/$(BACKEND_JAR_NAME)
              runtimeStack: JAVA|17-java17
              startUpCommand: java -jar /home/site/wwwroot/$(BACKEND_JAR_NAME)

          - task: AzureAppServiceSettings@1
            displayName: ‚öôÔ∏è Configure App Settings
            inputs:
              azureSubscription: $(AZURE_SUBSCRIPTION)
              appName: $(BACKEND_APP_NAME)
              resourceGroupName: $(RESOURCE_GROUP)
              appSettings: |
                [
                  {
                    "name": "SPRING_PROFILES_ACTIVE",
                    "value": "prod",
                    "slotSetting": false
                  },
                  {
                    "name": "SERVER_PORT",
                    "value": "8080",
                    "slotSetting": false
                  },
                  {
                    "name": "WEBSITES_PORT",
                    "value": "8080",
                    "slotSetting": false
                  },
                  {
                    "name": "CORS_ALLOWED_ORIGINS",
                    "value": "https://yellow-ground-042c31000.3.azurestaticapps.net,http://localhost:5173",
                    "slotSetting": false
                  }
                ]

          # üîë CRITICAL: Get Backend URL and expose as output variable
          - task: AzureCLI@2
            name: GetBackendUrl
            displayName: üîó Get Backend URL for Frontend
            inputs:
              azureSubscription: $(AZURE_SUBSCRIPTION)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                echo "üîç Retrieving backend URL..."
                BACKEND_HOSTNAME=$(az webapp show --name $(BACKEND_APP_NAME) --resource-group $(RESOURCE_GROUP) --query "defaultHostName" -o tsv)
                BACKEND_FULL_URL="https://${BACKEND_HOSTNAME}"
                echo "‚úÖ Backend URL: $BACKEND_FULL_URL"
                echo "##vso[task.setvariable variable=backendUrl;isOutput=true]$BACKEND_FULL_URL"

      # Deploy Frontend to Azure Static Web Apps
      - job: DeployFrontend
        displayName: Deploy Frontend to Azure Static Web Apps
        dependsOn: DeployBackend
        variables:
          # üîë CRITICAL: Consume backend URL from previous job
          BACKEND_API_URL: $[ dependencies.DeployBackend.outputs['GetBackendUrl.backendUrl'] ]
        steps:
          - checkout: self
            fetchDepth: 1

          - task: NodeTool@0
            displayName: Install Node.js $(NODE_VERSION)
            inputs:
              versionSpec: $(NODE_VERSION)

          - script: |
              echo "üîó Backend API URL: $(BACKEND_API_URL)"
              cd $(FRONTEND_PATH)
              npm ci
            displayName: üì¶ Install Dependencies

          - script: |
              cd $(FRONTEND_PATH)
              echo "VITE_API_BASE_URL=$(BACKEND_API_URL)/api" > .env.production
              cat .env.production
              npm run build
            displayName: üèóÔ∏è Build Frontend with Backend URL

          - task: AzureStaticWebApp@0
            displayName: üöÄ Deploy to Azure Static Web Apps
            inputs:
              app_location: $(FRONTEND_PATH)/$(FRONTEND_BUILD_OUTPUT)
              skip_app_build: true
              azure_static_web_apps_api_token: $(AZURE_STATIC_WEB_APPS_API_TOKEN)

  # ==============================================================================
  # STAGE 5: POST-DEPLOYMENT VALIDATION
  # ==============================================================================
  - stage: PostDeploymentValidation
    displayName: ‚úÖ Post-Deployment Validation
    dependsOn: DeployProduction
    condition: succeeded()
    jobs:
      - job: HealthCheck
        displayName: Health Check & Smoke Tests
        steps:
          - script: |
              echo "üè• Running Health Checks..."

              # Backend Health Check
              BACKEND_URL="https://$(BACKEND_APP_NAME).azurewebsites.net/actuator/health"
              echo "Checking Backend: $BACKEND_URL"

              RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" $BACKEND_URL)
              if [ $RESPONSE -eq 200 ]; then
                echo "‚úÖ Backend is healthy"
              else
                echo "‚ùå Backend health check failed with status: $RESPONSE"
                exit 1
              fi

              # Frontend Health Check
              FRONTEND_URL="https://$(FRONTEND_APP_NAME).azurestaticapps.net"
              echo "Checking Frontend: $FRONTEND_URL"

              RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" $FRONTEND_URL)
              if [ $RESPONSE -eq 200 ]; then
                echo "‚úÖ Frontend is accessible"
              else
                echo "‚ùå Frontend health check failed with status: $RESPONSE"
                exit 1
              fi

              echo "‚úÖ All health checks passed!"
            displayName: üè• Health Check
            continueOnError: false

          - script: |
              echo "üìä Deployment Summary:"
              echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
              echo "üîπ Backend URL: https://$(BACKEND_APP_NAME).azurewebsites.net"
              echo "üîπ Frontend URL: https://$(FRONTEND_APP_NAME).azurestaticapps.net"
              echo "üîπ Build Number: $(Build.BuildNumber)"
              echo "üîπ Deployed Branch: $(Build.SourceBranchName)"
              echo "üîπ Commit: $(Build.SourceVersion)"
              echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            displayName: ÔøΩ Deployment Summary

# ==============================================================================
# END OF PIPELINE CONFIGURATION
# ==============================================================================